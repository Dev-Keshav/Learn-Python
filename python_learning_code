#Started with python

#addition of two numbers
"""
a= 3+4
print(a)
"""

#Subtraction of two numbers
"""
a= 3-8
print(a)
"""

#Multyplication of two numbers
"""
a= 3*8
print(a)
"""
#finding power
"""
a= 2**3
print(a)
"""
#Division
"""
a= 4/2
print(a)
"""

#----float Division---
"""
a= 4//2
print(a)
"""
#Multyple mathmatic opertion
"""
#a= 3+5-2
a= (3+5)*2
print(a)
"""

#Modular %

#a= 10//3
"""
a= 10%3   #Modular gives you the reminder part of division
print(a)
"""


#----------------------------String----------------------------------------

"""
print('pintoo')
"""
#-------------------
"""
a= 'pintoo'
print(a)
"""
#--------------------

#print("pintoo's laptop")

#print('pintoo "laptop"')

"""
print('pintoo\'s "laptop"') # \ means skip the special meaning of syntax
        #or
print("pintoo \"laptop")
"""

#Concatinate two strings or adding two string
"""
a= "pintoo"
b= " kumar"
c= a+b
print(c)
"""
#---------------
"""
a= "pintoo" + " kumar"
print(a)
"""
#---------------
#print string multyple times by mltylping
"""
a= "pintoo " * 10
print(a)
"""
#--------------------
"""
print("c:\computer\navin")
print("My \name is PinTwo") #In python \n has a special meaning which means after \n it will start printing from new line
                            #to avoid printing from new line simply put r called raw string before printing line
"""
#print(r"My \name is PinTwo")



#-------------------------variables-----------------------
#x= 2
#Variable is a container where you put the values | and name of the container is x

"""
x= 2
y= x+5
print(y)
"""
#-----------

#String | Variables
"""
first_name="pintoo"
name= first_name + " kumar"
print(name)
"""
#------------------------------------
"""
first_name="pintoo"
last_name= " kumar"
name= first_name + last_name
print(name)
"""
#-------------------
#Now let's fetch the strings from array

#name= "PinTwo"
"""
print(name[1]) #If i start from positve number it will print from left side
print(name[-1]) #If i start from negative number it will print from right side
"""
"""
print(name[0:3])
print(name[0:])
print(name[:3])
"""

#naam= print(name[0:]+" kumar")

#----------------------------------list in python------------------------------------------------------------------
"""
num= [54,64,32,65,45,87,23]
print(num)
print(num[1])
"""
#-----------
"""
naam= ["pintoo", "satyam", "keshav", "kush","shivam"]
print(naam)
print(naam[1])
"""
#-----------------------
"""
num= [54,64,32,65,45,87,23]
naam= ["pintoo", "satyam", "keshav", "kush","shivam"]

print(num,naam)
"""
"""
num= [54,64,32,65,45,87,23]
#num.append(11)      #It will add values in last
#num.insert(0,11)    #it will insert value on index number 0
#num.remove(54)  #it will remove that given values
#num.pop(0)      #it will remove the value of given index number
#del num[0:3]    #It will delete multiple value which is specify in index value
#num.extend([2,74,3,8,9])   #it will add multiple values
#print(min(num))  #it will gives you minimum value from list
#print(max(num))   # it will gives you maximum value from list
#print(sum(num))   # it will gives you sum list
#num.sort()   #it will give you values in sorted format
#num[0]= 55   #It wil change the value of given index value
print(num)
"""
#-------------------------------------Tuple in python--------------------------------------------
#Tuple is Unmutable it means we can't change the values like List
"""
tups= (22,43,67,32,98,54,36,22)
#print(tups[1])
print(tups)
"""

#--------------------------------------Set in python-----------------------------------------
#set is a colection of unique values, it means in a set their should not be repeated value otherwise it will not print
#set do not follow  sequence so it does not support index function
"""
se= {23,56,79,34,32,90,78}
print(se)
"""
#-----------
"""
se= {23,23,56,79,34,32,90,78}
#se.remove(90)  #It will remove the given value from set
print(se)
"""

#------------------------------------Dictionery in python-------------------------------------------------
"""
data= {1:"pintoo", 2:"satyam", 3:"kush", 4:"luv", 5:"shivam"}
print(data[1])
#print(data.get(6))
print(data)
"""
#-----------------
"""
name= ["pintoo", "styam", "kush", "shivam"]
program= ["python","css","java", "html"]
dicts= dict(zip(name,program))

#print(dicts)
print(dicts["pintoo"])

#dicts["tarun"]= "js" #this line will add more in the dictioney
#del dicts["tarun"]   #this will delete from dictionery

print(dicts)
"""

#-------------Dictionery in dictionery-------------------------
"""
data= {"pintoo":"yadav","satyam":'tiwari',"nikhil":"singh","subject":["hindi","english","science","math"],

       "city":{"pintoo":"pitampura","nikhil":"begumpur","satyam":"saraswati vihar"}}

print(data)
print(data["pintoo"])

print(data["subject"])
print(data["subject"][1])

print(data["city"])
print(data["city"]["satyam"])
"""

#--------------------------More on variables------------------------------
"""
num= 4
naam= "pintwo"

print(id(num))
print(id(naam))
"""
#-------------
"""
a= 5
#b=a
b=6
m= 5

print(id(a))
print(id(b))
print(id(m))
"""

#--------------------------------------------Data types in python--------------------------------------------------

#None
#Numeric
#String
#List
#Tuple
#Set
#Range
#Dictionery

#-----------------------------------None data type---------------------------

#When you have variables which have not assign any value is called None

#---------------------------Numeric data type-------------------------------

#int
#float
#complex
#bool
"""
a= 8
print(type(a))   #int

b= 4.2
print(type(b))   #float

c= 3+5j
print(type(c))   #comlex

d= 5<8          #bool  (boolean data type is either True or False. In Python, boolean variables are defined by the True and False keywords)
print(type(d))
"""

#------convert one data types to another

#int to float

"""
a= 8
b= float(a)
print(b)
print(type(b))
"""
#float to int
"""
a= 8.3
b= int(a)
print(b)
print(type(b))
"""
#int to bool
"""
a= 8
b= bool(a)
print(b)
print(type(b))
"""
#int to complex
"""
a= 8
b= 3
c= complex(a,b)
print(c)
print(type(c))
"""
#-------------------------------------[list], (tuple), {set}, "string" data type-------------------------------------
"""
lst= [34,67,12,63,25,29,54]
print(type(lst))  #list

tpl= (34,67,12,63,25,29,54)
print(type(tpl))   #tuple

sat= {34,67,12,63,25,29,54}
print(type(sat))   #set

str= "pintoo"
print(type(str))
"""
#----------------------------------range data type---------------------------------------
"""
x= list(range(10))
print(x)
"""
"""
x= list(range(1,10,2))
print(x)
"""

#----------------------------------Dictionery data type------------------------------------------------------
"""
data= {"pintoo":"realme c1", "satyam":"jio phone", "kush":"samsung", "shivm":"apple"}

print(data)
print(data.keys())
print(data.values())
print(data["pintoo"])
"""
#-----------------------------------operators in python----------------------------------------------
#Arithmetic operators
#Assignment operators
#Relational operators
#Logical operators
#Unary operator

#-----------------------------------------Arithmetic operators-------------------------------------
"""
a= 3+4          #Addition
print(a)
"""
"""
a= 3-8     #Subtracion
print(a)
"""
"""
a= 3*8   #Multiplication
print(a)
"""

#------------------------------------------Assignment operators-------------------------------------------
#simply means assigning the values

"""
a= 5
b,c= 3,7

print(a)
print(b)
print(c)
"""
#-------
"""
a=5
b= 7
c= a+b
print(c)
"""
#--------------------------------------------------Unary operators--------------------------------------------
#(-)
"""
n= 7
n= -n
print(n)
"""

#---------------------------------------------Relational operators-----------------------------------------------

"""
a= 5
b= 6

#x= a<b      #a is less then b
#x= a>b       #a is greater then b
#x= a==b     #a is equal to b
#x= a<=b     #a is less then and equal to b
#x= a>=b     #a is greater then and equal to b
#x= a!=b     #a is not equal to b 

print(x)
"""

#---------------------------------------Logical Operators------------------------------------------------------------
"""
a= 5
b= 6
#x= a<10 and b<15  #and operator will print true if both the condition are true
#x= a<10 and b<4   #and operator will print false if one codition is true or another condition is false
#x= a<10 or b<15
x= a<10 or b<b
print(x)
"""
"""
a= True
a= not a
print(a)
"""

#---------------------------------------------Number System Conversion in python----------------------------------------

#Decialmal > Base 10 > 0-9 : 0-1-2-3-4-5-6-7-8-9
#Binary > Base 2 > 0-1 : 0-1
#Octal > Base 8 > 0-7: 0-1-2-3-4-5-6-7
#HexaDecimal > Base 16 > 0-9 a-f: 0-1-2-3-4-5-6-7-8-9 a-b-c-d-e-f


#convert decimal number to binary format: 25 > 0b11001
"""
a= bin(25)
print(a)
"""
#convert binary format to decimal number: 0b11001 > 25
"""
a= 0b11001
print(a)
"""
#convert decimal number to Octal format: 25 > 0o31
"""
a= oct(25) 
print(a)
"""
#convert octal format to decimal number: 0o31 > 25
"""
a= 0o31
print(a)
"""

#convert decimal number to HexaDecimal format: 25 > 0x19 , 10> 0xa
"""
a= hex(25)
print(a)
"""
"""
b= hex(10)
print(b)
"""
#convert HexaDecimal to decimal number: 0x19 > 25 , 0xa > 10
"""
a= 0x19
print(a)
"""
"""
b= 0xa
print(b)
"""

#---------------------------------------------------Swap variables-----------------------------------------


#1st  Way

"""
a= 5
b= 6

temp= a
a= b
b= temp
print(a)
print(b)
"""
#2nd Way

"""
a= 5
b= 6

a= a+b   #11
b= a-b   #5
a= a-b   #6

print(a)
print(b)
"""

#3rd Way
#Method: (^) XOR
"""
a= 5
b= 6

a= a ^ b
b= a ^ b
a= a ^ b

print(a)
print(b)
"""
#4th Way
#Method: ROT_TWO()
"""
a= 5
b= 6

a,b = b,a

print(a)
print(b)
"""

#---------------------------------------------------Bitwise Opertors in python------------------------------------------------
#compliment opertor (~)
#And (&)
#Or (|)
#XOR (^)
#Left shift (<<)
#Right shift (>>)

#---------Compliment opertors(~)
#Compliment opertors simply reverse the number 1>0 | 0>1

"""
print(~12)

#Output: (-13)
"""
#-------And (&) operator
"""
print(12 & 13)

#Output: (12)
"""
#-------Or (|) operator
"""
print(12 | 13)

#Output: (13)
"""
#-------XOR (^) operator
"""
print(12 ^ 13)

#Output: (1)
"""
#--------Left shift (<<) opertor
"""
print(10 << 2)

#Output: (40)
"""

#--------Right shift (>>) opertor
"""
print(10 >> 2)

#Output: (2)
"""


#------------------------------Import math function in python------------------------------------

#import math

"""
x= math.sqrt(25)
print(x)
"""

#--Floor & Ceil function
"""
x= math.floor(2.4)
print(x)

y= math.ceil(2.5)
print(y)
"""
#Power of -- function
"""
n= 5**2
print(n)
#or
a= pow(5,2)
print(a)
"""
#Find value of Pi
"""
print(math.pi)
"""
#find epsilon
"""
print(math.e)
"""

#Importing math as m
"""
import math as m

a= m.sqrt(25)
print(a)
"""
#importing specific module from math
"""
from math import sqrt,pow

a= sqrt(25)
print(a)

b= pow(5,2)
print(b)
"""
#Research more fucntion of math...
"""
import math
help(math)
"""

#---------------------------------------User Input in python------------------------------------------------------------
"""
x= int(input("Enter first Number"))
y= int(input("Enter Second Number"))
z= x+y
print(z)
"""
#Fetching specific input
"""
a=(input("Enter your Name"))
print(a[0])
"""
"""
a=(input("Enter your Name"))[0]
print(a)
"""
#Evaluating Expresion (like:7+4-2)
"""
a= eval(input("Enter your expression"))
print(a)
"""

#-------------------------------------if,else statement-----------------------------------------------------------------
#if
#if else
#if elif
#nested if
#-----------------

#if Statement
"""
if True:
    print("It's true")
print("By")
"""
"""
x= 10
y= x%2
if y==0:
    print("it's Even Number")
"""

#if else statement
"""
x= 9
y= x%2
if y==0:
    print("it's Even Number")
else:
    print("It's Odd Number")
"""
#nested if (means: if inside if)
"""
x= 10
y= x%2
if y==0:
    print("it's Even Number")
    if y<5:
        print("It's greater")
else:
    print("It's Odd Number")
"""
#or

"""
x= 2
y= x%2
if y==0:
    print("it's Even Number")
    if y>5:
        print("It's greater")
    else:
        print("Not so great")
else:
    print("It's Odd Number")

"""

#if elif statement
"""
x= 2

if x==1:
    print("One")
elif x==2:
    print("Two")
elif x==3:
    print("Three")
elif x==4:
    print("Four")
else:print("Over Limit")
"""

#---------------------------------------------------While loop----------------------------------------------------------
#while loop
#nested while loop
#----------------------

#while loop
"""
x= 1        #initialization
while x<=5:    #condition
    print("Hello world")
    x= x+1    #'Increment'/Decrement
"""
#or
"""
x= 5
while x>=1:
    print("Hello world")
    x= x-1
"""
#nested while loop (means: while loop inside while loop)
"""
x= 1
while x<=5:
    print("Hello ", end="")
    y= 1
    while y<=5:
        print("World ",end="")
        y= y+1

    x= x+1
    print()
"""

#--------------------------------------------For loop-------------------------------------------------------------------
"""
x= ["pintwo", 3, 4.1]

for i in x:
    print(i)
"""
#or
"""
x= "pintwo"

for i in x:
    print(i)
"""
#or
"""
for i in ["pintoo",5,6.3]:
    print(i)
"""
#or
"""
for i in range(1,100):
    print(i)
"""
#if inside for loop
"""
for i in range(1,11):
    if i%5!=0:
        print(i)
"""

#--------------------------------------------------Break, Continue, Pass------------------------------------------------

"""
x= int(input("How many candy do you want?"))

i= 1
while i<=x:
    print("Candy", i)
    i+=1
"""
#or
#-----Break
"""
av= 10
x= int(input("How many candy do you want?"))

i= 1
while i<=x:
    if i>av:
        print("Sorry only", av , "Candy are available")
        break
    print("Candy", i)
    i+=1

print("Okay, By")
"""

#------Continue

"""
for i in range(1,100):
    if i%3==0:
        continue
    print(i)

print("By")
"""
#or

"""
for i in range(1,100):
    if i%3==0 or i%5==0:
        continue
    print(i)

print("By")
"""
#-----pass
"""
for i in range(1,100):
    
    if i%2!=0:
        pass
    else:
        print(i)

print("By")
"""
#----------Continue vs Pass vs Break


#continue function

"""
for i in range(101):
    if i==3:
        continue    #Continue function skip given condition
                    #but it will print print other all numbers. In other word it will skip 3 (given condition) and continue all other number
    print(i)

"""

#break function

"""

for i in range(1,101):

    if i==3: #in this condition (if i==3:) and set break fuction, break function skip given condition
            #break function will stop the loop after found given function
                #in other word 1 to 100 after 3 it will not print next number from 3
        break

    print(i)
"""

#pass fuction

""" 

for i in range(100):

    if i==3:#in many scenario we have to use some function in our code, but at that time we don't want to call that fucntion
           #so, for that we use pass function it will skip those function or not execute that specific function
        pass

    print(i)

"""


#---------------------------------------------------Printing pattern in python------------------------------------------


# # # # # #
# # # # # # 
# # # # # # 
# # # # # #

"""
for i in range(4):

    for j in range(6):
        print("# ",end="")

    print()
"""

#or

#
# #
# # #
# # # #

"""
for i in range(4):
    for j in range(i+1):
        print("# ",end="")

    print()
"""
#or


# # # # 
# # # 
# # 
# 
"""
for i in range(4):

    for j in range(4-i):
        print("# ",end="")
    print()
"""


#------------------------------------------------for else-------------------------------------------------------
"""
num= [34,56,20,76,36,23]
for nums in num:
    if nums % 5==0:
        print(nums)
        break
else:
    print("Number not found!")
""" 

#-------------------------------------------------prime numbers-----------------------------------------------------

"""
num= 7
for i in range(2,num):
    if num % i == 0:
        print("Not prime")
        break
else:
    print("Prime")
"""

#----------------------------------------------------Array in python-----------------------------------------------------
"""
from array import *

#search on google for: "Python type code" or "python unicode"

val= array("i",[32,56,-4,9,8,2,3])
#val= array("I",[32,56,-4,8,2,3])

print(val)

print(val.buffer_info()) #it will print addres of array and the size
print(val.typecode)  #it will print type which we are working with right now
#val.reverse()   #it will reverse the order
#print(val[0]) #print using index value

for i in val:
    print(i)

#or

for i in range(len(val)):
    print(val[i])
#or

for i in range(5):
    print(val[i])

#for character unicode
#make sur array is imported

data= array("u",["a","r","h","f","e","i"])
print(data)


for i in data:
    print(i)

#if you don't know the "typecode"
#make sur array is imported

val= array("i",[32,56,4,9,8,2,3])

new_arr= array(val.typecode,(a for a in val)) #it will fetch value and typecode one by one from "vall" variable

print(new_arr)

#print using for loop
for i in new_arr:
    print(i)


#print using while loop

x= 0
while x<len(new_arr):
    print(new_arr[x])
    x= x+1
"""



#----------------------------------------Array taking value from user---------------------------------------------------
#search in Array
#Inserting elements in Array
#Searching for elements in Array

"""
from array import *

data= array("i",[])

#asking for the lenth of the array from user

lent= int(input("Enter the length of the Array"))

for i in range(lent):
    x= int(input("Enter the next value"))
    data.append(x)

print(data)


#Searching for elements in Array (using manual method)

val= int(input("Enter the value for search"))

k= 0
for e in data:
    if e==val:
        print(k)
        break

    k= k+1

#Searching for elements in Array (using function method)

#print(data.index(val))

"""


#-------------------------------------------Installing Numpy------------------------------------------------------------
#working with numpy
#creating array with numpy
"""
from numpy import *

#with numpy package no need to specify typecode

arr= array([32,54,67,36,98,45,73,82,97,43,65])
print(arr)

"""

#--------------------------------------------different ways of creating array in numpy--------------------------------------------

#array()
#linspace()
#logspace()
#arange()
#zeros()
#ones()


from numpy import *

"""
#array()

arr= array([36,56,34,38,67,45])
print(arr)
print(arr.dtype)
print(type(arr))
"""

#linspace()

"""
arr= linspace(0,15,5) #linspace() takes three parameters first is to start second is length & third is to break into the numbers of part
print(arr)
"""

#arange()

"""
arr= arange(0,15,5) #arange() takes three parameters first is to start second is length & third is step
print(arr)
"""

#logspace()

"""
arr= logspace(0,15,5) #logspace() takes three parameters first is to start second is length & third is to break into the numbers of part
print(arr)            #but in the logspace d/f b/w parts depends upon the log
print("%.2f"%arr[0])
"""

#Zeros()

"""
arr= zeros(5) #it will create an array of the given size or value will be 0 of every number by default
print(arr)
"""

#Ones
"""
arr= ones(5) #it will create an array of the given size or value will be 1 of every number by default
print(arr)
"""

#---------------------------------------------Copying an array in python--------------------------------------------------

#Array addition
#Aliasing
#Shallow copy
#Deep copy



from numpy import *

#More stuff with array

#Array addition
"""
arr= array([1,2,3,4,5])
arr= arr + 5
print(arr)
"""
#Addition of two array also called Vactorized Operation

"""
arr1= array([1,2,3,4,5])
arr2= array([4,1,7,3,8])

arr3 = arr1 + arr2

print(arr3)
"""

#Concatenate Two arrays
"""
arr1= array([1,2,3,4,5])
arr2= array([6,7,8,9,8,10])

arr3= (concatenate([arr1,arr2]))  #making two big array

print(arr3)
"""
"""
arr= array([1,2,3,4,5])

print(sin(arr))
print(cos(arr))
print(log(arr))
print(sqrt(arr))
print(sum(arr))
print(min(arr))
print(max(arr))
print(size(arr))
"""

#Copying an array | Aliasing
"""
arr1= ([6,4,2,9,1])

arr2= arr1

print(arr1)
print(arr2)

print(id(arr1))  #both the array having the same id, both are pointing to same address also called Aliasing
print(id(arr2))
"""
#How to create new array at d/f location | use: .view()
#or Shallow copy: simply means it copy the array but both array are still independent on each other
"""
arr1= array([6,4,2,9,5])
arr2= arr1.view()

#arr1[0]=7  #This will affect both the arrays called shallow copy
print(arr1)
print(arr2)

print(id(arr1))
print(id(arr2))
"""
#---------Deep copy
"""
arr1= array([6,4,2,9,5])
arr2= arr1.copy()

arr1[0]=7  #This will affect only one arrays called Deep copy

print(arr1)
print(arr2)

print(id(arr1))
print(id(arr2))
"""

#-------------------------------------------Working with Matrix in python--------------------------------------------------
#How to create Matrix
#Matrix Multiplication

from numpy import *

#Creating an multi-dimensional Array
"""
arr= zeros((3,4),dtype=int)  #3 is number of Row & 4 is number of Column
print(arr)
"""
#or
"""
arr1= array([

            [1,2,3],
            [4,5,6],
            [7,8,9],
            [10,11,12]

           ])

print(arr1)
"""
"""
print(arr1.dtype)  #type of an array
print(arr1.ndim)   #This will print the dimension of an array
print(len(arr1))   #This will count the numbers of Row
print(arr1.shape)  #This will print the numbers of Row & Column
print(arr1.size)   #This will print the size/elements of entire block
"""
# Creating an single-dimensional array from multi-dimensional array
"""
arr2= arr1.flatten()
print(arr2)
"""

# Creating an Multi-dimensional array from single-dimensional array
"""
arr3= array([ 1,2,3,4,5,6,7,8,9,10,11,12])

arr4= arr3.reshape(3,4)
print(arr4)
"""
#Creating an big 3 dimensional array in which have 2 dimensional array with each have 3 values
"""
arr4= array([
    [ 1,2,3,4,5,6],
    [7,8,9,10,11,12]
            ])

arr5= arr4.flatten()
arr6= arr5.reshape(2,2,3)
print(arr6)
"""

#Matrices Concept: you can imagine two domensional array which has multiple rows and column
#Row Matrix:single row and multiple column
#Column Matrix: Single column and multiple rows

#Creating an Matrix
"""
arr4= array([
                [ 1,2,3,4],
                [5,6,7,8]
            ])

m= matrix(arr4)
print(m)
"""
#or
"""
m= matrix("1 2 3; 4 5 6; 7 8 9")  #To seprate [] the column simply put semi colon ;
print(m)

print(diagonal(m)) #diagonal functional print only diagonal numbers(shape)which is [1 6 11] not the entire matrix
print(m.min())  #This will print the min values
print(m.max())  #This will print the max values
"""

#Adding, Multyplying Matrices

m1= matrix("1 2 3; 4 5 6; 7 8 9")
m2= matrix("1 2 3; 4 5 6; 7 8 9")
m3= m1+m2  #Adding two Matrix
m4= m1 * m2 #Myltiplying two Matrices: This is not simple multiplication; Matrices Multiplication Theory: https://goo.gl/omPVAS
print(m3)
print(m4)

#---------------------------------Functions in  python---------------------------------------------------------------
#What is function?  : Function is a block where you have one task
#Why function?     :You can create seprate function for seprate tast or you can also use them again & again by calling once
#Creating and calling function
"""
def greet():   #Definig function
    print("Hello")
    print("Good Morning")
"""
#greet()  #Calling function


#Addition of Two numbers
"""
def add(x,y):
    c= x+y
    print(c)

add(3,5)

"""
#Return Function

"""
def add(x,y):
    c= x+y
    return c

result= add(3,5)

print(result)

"""

#Returning Two Values
"""
def add_sub(x,y):
    a= x+y
    s= x-y
    return a,s

result1,result2 = add_sub(5,4)
print(result1,result2)

"""

#--------------------------------------------------------Functions Arguments in python-------------------------------------------------
#Mutable and Imutable arguments
#This concept is not in python but in other languages: Pass by Value(Means by value) or Pass by reference (Means pass by address)

"""
def update(x):
    x= 8
    print(x)

update(10)

"""
#or

"""
def update(x):
    #print("x:", id(x))
    x= 8
    #print("x2:", id(x))
    print("x: ", x)

a=10
#print("a:", id(a))
update(a)
#print("a: ", a)

"""

#or


"""
def update(lst):
    print("lst1:", id(lst))
    lst[1]= 10
    print("lst2:", id(lst))
    print("x: ", lst)

lst= [5,6,7,8,9]
print("lst0:", id(lst))
update(lst)
print("lst: ", lst)

"""

#------------------------------------------------Types of Arguments----------------------------------------------------------
#position
#keyword
#Default
#Variable Length

"""
def add(a,b):  #the accepting/Defining arguments also called as "Formal Arguments"
    ad= a+b
    print(ad)


add(5,7)    #the passing/Calling arguments also  called as "Actual Arguments"
            #The "Actual Arguments" itself has 4 Types Arguments
            #(1) position
            #(2) keyword
            #(3) Default
            #(4) Variable Length
"""

#Position Arguments

"""
def person(name,age):
    print(name)
    print(age-5)


person(age=17,name="keshav")  #When you don't know the sequence of passing & Accepting Arguments put the variable name called "keywords"
                              #or "keyword Arguments"

"""

#Default Arguments
"""
def person(name, age=17): #if the actual argument is not passing, you can define here by "Default Argument"
    print(name)
    print(age)

person("keshava")
#person("keshav",20) #if you have given "default argument" and also passing "actual argument"
                      #then the "actual argument" will override the "default argument"

"""


#Variable Length Arguments : (you can define the function where the numbers of actual argumnts is not fixed)
"""
def sum(a,*b):  #The first argument is to confirm that we will have atleast two arguments and the second arguments length is not confirm
    c= a
    for i in b:
        c= c+i
    print(c)

sum(3,5,7,4,2)

"""
#or
"""
def sum(*b):
    c= 0
    for i in b:
        c= c+i
    print(c)

sum(3,5,7,4,2)

"""

#-------------------------------------------Keyworded Variable Length Arguments in Python / **kwargs---------------------------

"""
def person(name, **data):  #** means you are passing multiple arguments with the help of keywords
    print(name)            #this is similar to Variable Length Arguments but the d/f is that
                           #in Variable Length Arguments you can not pass value with keywords but here you can
  
    for i,j in data.items(): #i for keywords and j for values
        print(i,j)

person("keshav", age= 17, state= "Delhi", number= 7827602234)

"""

#------------------------------------------Global Keyword in python-------------------------------------------------
#Global vs Local
#global a
#globals()["a"]


#-----Global or Local variable
"""
a= 10    #Global Variable (Available for entire region called "Global Scope") same vriable can be use inside function

def something():
    a= 15      #Local Variable : this variable can't use outside of the function (only available for inside function called "Local Scope")
    print("Local",a)


print("Global",a)
something()

"""
#------global a--------------
"""
a= 10

def something():
    global a       #if you wanted to change Local to Global variable then specify it with global keyword
    a= 15
    print("in function",a)

something()

print("outside",a)

"""
#-----------globals a-------------------

"""
a= 10
print("a",id(a))

def something():
    a= 9
                          #If you want local variable "a" and access of global also wanted to change the global variable
    x= globals()["a"]     #this will access the global variable "a"
    print("x",id(x))
    print("in function",a)

    globals()["a"]=15 #this will change the value of global variable "a" without affecting local variable "a" which is accessed in "x" variable

something()

print("outside",a)

"""

#-----------------------------------------------Pass List to a Function in python--------------------------------------------------------
#Count number of a Even and Odd
#Numbers in a List

def count(lst):
    odd= 0
    even= 0

    for i in lst:
        if i%2==0:
            even+=1
        else:
            odd+=1

    return even,odd


lst= [20,25,14,19,16,24,28,47,26]
even, odd= count(lst)
#print(even)
#print(odd)

print("Even: {} Odd: {}".format(even,odd))


#-----------------------------------------Fibonacci Sequence in python-------------------------------------------------------------
# Fibonacci Sequence: [0] [1] [1] [2] [3] [5] [8] [13] [21]
#Making Fibonacci Sequence in python
"""
def fib(n):

    a= 0
    b= 1

    print(a)
    print(b)

    for i in range(2,n):

        c= a + b
        a= b
        b= c
        print(c)


fib(5)

"""
#or
"""
def fib(n):

    a= 0
    b= 1

    if n==1:       #if you only want first fibonacci number
        print(n)
    else:

        print(a)
        print(b)

        for i in range(2,n):

            c= a + b
            a= b
            b= c
            print(c)


fib(1)
"""


#---------------------------------------Factorial of a number in python-------------------------------------------------
#5!= 5*4*3*2*1 or 5!= 1*2*3*4*5 | (5!= 120, 4!= 24)
"""
def fact(n):

    f= 1

    for i in range(1,n+1):

        f= f*i

    return f

x= 5
result= fact(x)
print(result)
"""

#----------------------------------------Recursion in python---------------------------------------------------------
#Recursion: simply means calling a function itself

"""
def greet():
    print("Hello")
    greet()     #this is calling itself called Recurion
                #this will print 1k times [technically infinite times] and stop with error exceed limit

greet()

"""
#or
"""
import sys

sys.setrecursionlimit(2000)  #if you wanted to set the limit of recursion
print(sys.getrecursionlimit()) #if you wanted to know recurion limit

i = 0
def greet():

    global i
    i= i+1    #counter: this will show how many time recurion has printed/(greet())
    print("Hello",i)
    greet()
    
greet()

"""


#---------------------------------------Factorial using Recursion--------------------------------------------------------
#finding Factorial of a number using Recursion
"""
def fact(n):

    if n==0:
        return 1

    return n * fact(n-1)


result= fact(5)
print(result)

"""

#--------------------------------------------------Anonymous Functions | Lambda-------------------------------------------
#Anonymous Functions or Lambda:  Function without name
#We can define function without name with the help of lambda function/expression
#this comes into picture when you wants to use function only ones and don't wants to define name of function
"""
f= lambda a : a*a

result= f(5)
print(result)
"""
#How to add two number using lambda

"""
add= lambda a,b : a+b

result= add(3,5)
print(result)
"""


#-------------------------------------------filter() | map() | reduce()------------------------------------------------------

#------filter()
#this function is used to filter out the elements of an iterabe/sequence depending on a function that tests each element in the sequence
   #to be true or not
#it return those elements of sequence, for which function is true


"""
def is_even(n):
    return n%2==0

nums= [2,3,6,8,4,6,2,9]

evens= list(filter(is_even,nums)) #filter will takes two arguments, first is your function where you the mention logic 
                                   # or second is your list/sequence/iterable
print(evens)

"""
#or  reduce number of line
"""
nums= [2,3,6,8,4,6,2,9]

is_even= lambda a : a%2==0

evens= list(filter(is_even,nums))

print(evens)

"""
#or

"""
nums= [2,3,6,8,4,6,2,9]
evens= list(filter(lambda a : a%2==0,nums))
print(evens)

"""
#-------map()
#this function excutes a specified function on each element of the iterable/sequence and perhaps change the elements 
#or
#whenever you want to change the every value, there map() function comes into the picture !

"""
nums= [2,3,6,8,4,6,2,9]

doubles= list(map(lambda a : a*2, nums))   #this will multiple the each value to 2

print(doubles)

"""
#----reduce()
#this function is used to reduce a sequence of elements to a single value by processing the elements according 
  #to a function supplied. it returns a single value
  
#this function is a part of functools module so you have to import it before using


"""
from functools import  reduce 
#reduce function is not inbuilt to use it, import it


#def add_all(a,b):
    #return a+b    #instead of using this function  use lambda function 


nums= [2,3,6,8,4,6,2,9]

sum= reduce(lambda a,b : a+b,nums)

print(sum)
"""

#filter(),map(),reduce() "ek saath"
"""
nums= [2,3,6,8,4,6,2,9]

evens= list(filter(lambda a : a%2==0,nums)) #this will filter the even number
print(evens)

doubles= list(map(lambda a : a*2, evens)) #this will multiply the number to 2 
print(doubles)

from functools import reduce
sum= reduce(lambda a,b : a+b,doubles)   #this will add the all numbers
print(sum)

"""

#---------------------------------------------Decorators in python-----------------------------------------------------
#using decorators you can add extra features to existing function

"""
def div(a,b):
    print(a/b)

div(2,5) 
"""
#i want to make numerator should always be greater then denomenetor (look below "swap")

"""
def div(a,b):

    if a<b:
        a,b = b,a

    print(a/b)

div(2,5)

"""

#continue...

"""
def div(a,b):

    if a<b:         #imagine, this division function is not with you, its's in some other file
        a,b = b,a   #or maybe you don't have an access of the code or you don't want to change the code
                    #of the existing function
    print(a/b)
                    #and we wanted to swap these two variables without touching "div function" (look below)
div(2,5)            #so here, "Decorators" comes into the picture 
                    #Decorators: using decorators you can add extra features to existing function
"""
"""
def div(a,b):
    print(a/b)

def smart_div(func):   #this will be decorator for "div", or except div function as func as i have mentioned

    def inner(a,b):   #this inner function will take same number of parameter as taken by 'div' function,
                       #name should be same it's not compulsory
        if a<b:
            a,b = b,a
        return func(a,b)

    return inner

div1= smart_div(div)
div1(2,4)
"""


#--------------------------------------------------Modules in python----------------------------------------------------
#Making our own module in seprate file (Module_Calc) and use them by importing


"""
import Module_Calc  
                
a= 2
b= 4

add= Module_Calc.addition(a,b)
print(add)
subt= Module_Calc.subtraction(a,b)
print(subt)
"""
#or

"""
from Module_Calc import addition

a= 2
b= 4
add= addition(a,b)
print(add)
"""
#or

"""
from Module_Calc import *

a= 2
b= 4

add= addition(a,b)
print(add)

subt= subtraction(a,b)
print(subt)
"""

#---------------------------------------------------Special Variable __name__--------------------------------------------
#codes are linked with Module_Calc file

"""
print(__name__) #output: __main__ | the first module name is always main because that's the point of execution
                                     #that's where codes start
"""

#1

"""
import Module_Calc     #when you import module file, everything which is in module file
                       # come to where it has imported including print statement

print("module_calc says" + __name__)

"""

#2

"""
print("Hello")       #i wanted to welcome the user when they run this first file
print("Welcome user") #but when i import this module in other file and run that so there this code will welcome for in second file
                       #i don't wanted this so we will put condition (there below :))
"""

#3

"""
def main():
    print("Hello")
    print("Welcome user")

if __name__ == "__main__":
    main()
"""


#------------------------------------------------Special Variable __name__ | part-2 ------------------------------------
#step1
"""
def fun1():
    print("from fun1")

def fun2():
    print("from func2")

def main():
    fun1()
    fun2()

main()
"""

#step2
"""
from Module_Calc import add    #1

def fun1():
    add()
    print("from fun1")

def fun2():
    print("from func2")

def main():
    fun1()
    fun2()

main()
"""

#------------------------------------Object Oriented Programming (oops)| Introduction-----------------------------------
# oops concept in easy: (https://www.programiz.com/python-programming/object-oriented-programming)

#Python supports three types of Programming paradigms(Paradigms: Paradigm can also be termed as a method to solve some
                                                        # problems or do some tasks. A programming paradigm is an approach
                                                        # to solve the problem using some programming language)
#learn paradigms in python: (https://www.geeksforgeeks.org/programming-paradigms-in-python/)

#1- Procedure Oriented programming paradigms

    #(series of computational steps are divided modules which means that the code
    #is grouped in functions and the code is serially executed step by step)
    #or
    #if you wanted to create software, you will break down your
    #projects into small small parts and those module will be function

#2- Functional programming paradigms

    #It uses the mathematical function and treats every statement as functional
    #expression as an expression is executed to produce a value. Lambda functions or
    #Recursion are basic approaches used for its implementation. The paradigms mainly
    #focus on “what to solve” rather than “how to solve”.
    #or
    #means you can achive a certain task implementing function as a mathematical function, where
    #you not manupulate data, which is, instance chaning your data you will still acomplish a task
    #one of the way is ex. pass a function to a function

#3- Object Oriented programming paradigms

    #Object-oriented programming (OOP) is a programming paradigm based on the concept of "objects",
    #which can contain data and code: data in the form of fields (often known as attributes or properties),
    #and code, in the form of procedures (often known as methods)

    #every object will have two things:
    #1- Attribute: imagine as a data/property (ex. for huuman his name,age,height, etc)
    #2- behaviour: attribute which we know, our action defines our behaviour (ex. talking, running, dancing etc)

    #if you want to store something in object you need to define variables
    #if you wants to define behaviour you needs to methods (functions on oop is methods)

   # in oop have so many concepts like: objects, class, encapsulation, abstract, polymorphism,inheritance


#-----------------------------------------------------Class and objects-------------------------------------------------

#if you want to create object (tower) you need to blueprint (architect map) of it, here your blueprint is class
  #so, if you want boject you need to class of it

#Class - Design
#Object - Instance

"""
class computer:

    def config(self):    #behaviour (methods [function])  |  self is object which you are passing while calling
        print("i5, 16Gb, 1TB")


comp1= computer()      #"comp1" is an object of "class computer"
#print(type(comp1))

computer.config(comp1)      #calling...
"""

#or | another way of calling...
"""
class computer:

    def config(self):
        print("i5, 16Gb, 1TB")


comp1= computer()

#computer.config(comp1)

comp1.config()   # how it look behind: comp1.config(comp1)
"""

#or
"""
class computer:

    def config(self):
        print("i5, 16Gb, 1TB")


comp1= computer()
comp2= computer()

computer.config(comp1)
computer.config(comp2)

comp1.config()
comp2.config()
"""

#---------------------------------------------------__init__method------------------------------------------------------
#Special variable "__init__"  this is like function but here we call it "method"
"""
class computer():

    def __init__(self):    #this will call automatically (if object is created of its class)
        print("In init")

    def config(self):
        print("i3", "16Gb", "1TB")  #this will not call untill you not call it

comp1= computer()    #called object creation (computer())
"""

#or | let's build computer!

"""
class computer():

    def __init__(self,cpu, ram):    #  self = comp1 (the object) and other 2 parameter is which is excepting below ("i5" or 16)
        self.cpu= cpu
        self.ram= ram

    def config(self):
        print("config is ", self.cpu, self.ram)

comp1= computer("i5", 16)
comp2= computer("Rayzen3", 8)

comp1.config()
comp2.config()
"""

#-----------------------------------------------Constaructor, self and comparing objects--------------------------------

#----constructor
"""
class computer():
    pass  #we can't keep blank this area so just pass

                     #In our computer there is space called "Heap Memory" where where all the objects are stored

comp1= computer()   #every time you craete an object it is allocated to new space
comp2= computer()
                    #okay, size of an object? : Depends on the no. variables and size of each variable
                    #who allocates size to objects? | who is responsibble to assign the meamory or to calculate the memory?
                    #that's where "constructor" comes into the picture
print(id(comp1))
print(id(comp2))
"""

#-----------self | importance

"""
class computer():

    def __init__(self):
        self.name= "keshav"
        self.age= 17

comp1= computer()
comp2= computer()
  
  #both the object printing same data i wanted to update or change the data (below)

print(comp1.name, comp1.age)
print(comp2.name, comp2.age)
"""

#cotinue...

"""
class computer():

    def __init__(self):
        self.name = "keshav"
        self.age = 17

comp1 = computer()
comp2 = computer()

comp2.name= "Pintwo"
comp2.age= 16

print(comp1.name, comp1.age)
print(comp2.name, comp2.age)
"""

#continue...
"""
class computer():

    def __init__(self):
        self.name = "keshav"
        self.age = 17

    def update(self):
        self.name= "pintoo"
        self.age= 18

comp1 = computer()
comp2 = computer()

comp2.name= "Pintwo"
comp2.age= 16

comp2.update()    #or you can also change the values by defining method/function | if you have many obj you can cahnge it 
                  #by refering the obj name and .update() function

print(comp1.name, comp1.age)
print(comp2.name, comp2.age)
"""

#------------comparing  | what if i wanted to comapre two objects?

"""
class computer():

    def __init__(self):
        self.name = "keshav"
        self.age = 17

    def update(self):
        self.name= "pintoo"
        self.age= 17

    #parameters to compare two objects | comparing age
    def compare(self,other_age):   # Self=comp1, other_age=comp2 | compare(who is calling, whom to compare )
        if self.age== other_age:
            return True
        else:
            return False

comp1 = computer()
comp2 = computer()

#comparing two objects

if comp1.compare(comp2):

    print("They are same")
else:
    print("They are Different")

print(comp1.name, comp1.age)
print(comp2.name, comp2.age)
"""

